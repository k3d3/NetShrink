[netshrink]
# Use experimental protocols instead of stable
experimental = True
# Block protocols that cannot be shrunk
allow_unshrunk_traffic = False
# Whether to encrypt data or just pass through
encrypt_data = True
# Prefix used in nonces - this must be the same on both server and client
nonce_prefix = some_crazy_prefix
# Bytes in nonce (0-8, a value of 0 is EXTREMELY DANGEROUS)
nonce_bytes = 4
# Bytes in MAC (0-32, a value of 0 is EXTREMELY DANGEROUS)
mac_bytes = 4
# Interval to ping the other side in seconds, can be 0 on one or both sides
ping_interval = 60
# Tun interface name - you can optionally use %d for an allocated number
iface_name = netshrink%d
# Subnet in which netshrink IP addresses are allocated in
iface_subnet = 192.168.90.0/24
# Allow clients to connect to each other
client_to_client = False

[tcp]
# Shrink and scrub TCP/IP headers
shrink = True
# Remove checksum in transit, recalculate at endpoints
scrub_checksum = True

[tcp.http]
# Shrink and scrub HTTP when possible
shrink = True
# Shrink images into JPGs (not implemented yet)
convert_images = False
# Use LZMA on HTTP data section
use_lzma = True
# Group packets together until data_blocks bytes, then compress
data_blocks = 32768

[udp]
# Shrink and scrub UDP/IP headers
shrink = True
# Remove checksum in transit, recalculate at endpoints
scrub_checksum = True

[udp.dns]
# Shrink and scrub DNS requests and responses
shrink = True
# Remove any CNAME DNS recursion or otherwise
remove_recursion = True
# Limit results to this many entries, or -1 to allow unlimited
return_max = 2
# Keep a local cache and force this TTL on DNS requests out
force_ttl = 3600

[icmp.echo]
# Shrink and scrub ICMP Echo requests and responses
shrink = True
# Force echo data size, also scrubbing the parameter
force_size = 0
# Scrub the echo data content and recreate at endpoints
scrub_data = True
